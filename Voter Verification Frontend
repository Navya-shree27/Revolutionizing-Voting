<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voter Verification</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen p-4">

    <div class="bg-white p-8 md:p-10 rounded-3xl shadow-2xl w-full max-w-2xl flex flex-col md:flex-row gap-8 items-center">
        <!-- Main Content Area -->
        <div class="w-full md:w-1/2 flex flex-col items-center">
            <h1 class="text-3xl font-bold text-gray-800 mb-6 text-center">Voter Verification</h1>
            
            <!-- File Upload Section -->
            <div class="w-full mb-6">
                <label for="voter-id-input" class="block text-sm font-medium text-gray-700 mb-2">
                    Upload Voter ID Photo
                </label>
                <input type="file" id="voter-id-input" accept="image/*" class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>

            <!-- Live Camera Section -->
            <div class="w-full">
                <label class="block text-sm font-medium text-gray-700 mb-2">
                    Live Photo Capture
                </label>
                <video id="webcam-video" class="w-full h-auto rounded-lg border-4 border-gray-200" autoplay playsinline></video>
                <button id="capture-button" class="mt-4 w-full bg-indigo-600 text-white py-3 px-6 rounded-xl font-semibold hover:bg-indigo-700 transition-colors shadow-lg">
                    Capture Live Photo
                </button>
            </div>
            
            <div id="captured-images" class="mt-6 flex flex-col gap-4">
                <img id="voter-id-preview" class="hidden w-40 h-auto rounded-lg border-2 border-gray-400" alt="Voter ID Preview">
                <img id="live-photo-preview" class="hidden w-40 h-auto rounded-lg border-2 border-gray-400" alt="Live Photo Preview">
            </div>

            <button id="verify-button" class="mt-8 w-full bg-green-500 text-white py-4 px-6 rounded-2xl font-bold text-lg hover:bg-green-600 transition-colors shadow-lg disabled:bg-gray-400" disabled>
                Verify Voter
            </button>
            
            <div id="loading-indicator" class="hidden mt-4 text-center">
                <div class="animate-spin rounded-full h-8 w-8 border-4 border-gray-300 border-t-blue-500 mx-auto"></div>
                <p class="mt-2 text-gray-600">Verifying, please wait...</p>
            </div>
        </div>
        
        <!-- Results Section -->
        <div class="w-full md:w-1/2 flex flex-col items-center">
            <div id="result-box" class="w-full bg-gray-50 p-6 rounded-xl shadow-inner border border-gray-200 transition-all duration-300">
                <h2 class="text-xl font-semibold text-gray-800 mb-4 text-center">Verification Results</h2>
                <div id="result-content" class="text-gray-600 text-sm">
                    <p class="text-center font-medium">Results will appear here after verification.</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const voterIdInput = document.getElementById('voter-id-input');
            const webcamVideo = document.getElementById('webcam-video');
            const captureButton = document.getElementById('capture-button');
            const verifyButton = document.getElementById('verify-button');
            const voterIdPreview = document.getElementById('voter-id-preview');
            const livePhotoPreview = document.getElementById('live-photo-preview');
            const loadingIndicator = document.getElementById('loading-indicator');
            const resultBox = document.getElementById('result-box');
            const resultContent = document.getElementById('result-content');

            let voterIdBase64 = null;
            let livePhotoBase64 = null;

            // Start webcam feed
            async function startWebcam() {
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                    webcamVideo.srcObject = stream;
                } catch (err) {
                    console.error("Error accessing webcam: ", err);
                    alert("Unable to access webcam. Please check your browser permissions.");
                }
            }
            startWebcam();

            // Handle voter ID file upload
            voterIdInput.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onloadend = () => {
                        voterIdBase64 = reader.result;
                        voterIdPreview.src = voterIdBase64;
                        voterIdPreview.classList.remove('hidden');
                        checkCanVerify();
                    };
                    reader.readAsDataURL(file);
                }
            });

            // Handle live photo capture
            captureButton.addEventListener('click', () => {
                const canvas = document.createElement('canvas');
                canvas.width = webcamVideo.videoWidth;
                canvas.height = webcamVideo.videoHeight;
                const context = canvas.getContext('2d');
                context.drawImage(webcamVideo, 0, 0, canvas.width, canvas.height);
                livePhotoBase64 = canvas.toDataURL('image/jpeg');
                livePhotoPreview.src = livePhotoBase64;
                livePhotoPreview.classList.remove('hidden');
                checkCanVerify();
            });

            // Check if both photos are ready for verification
            function checkCanVerify() {
                if (voterIdBase64 && livePhotoBase64) {
                    verifyButton.disabled = false;
                } else {
                    verifyButton.disabled = true;
                }
            }

            // Handle verification process
            verifyButton.addEventListener('click', async () => {
                loadingIndicator.classList.remove('hidden');
                resultBox.classList.remove('bg-red-200', 'bg-green-200');
                resultContent.innerHTML = '<p class="text-center font-medium">Verifying, please wait...</p>';

                const payload = {
                    voterIdImage: voterIdBase64,
                    livePhoto: livePhotoBase64
                };

                try {
                    const response = await fetch('http://localhost:5000/verify', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(payload)
                    });

                    const result = await response.json();
                    
                    loadingIndicator.classList.add('hidden');
                    
                    if (result.verification_status === 'SUCCESS') {
                        resultBox.classList.add('bg-green-200', 'border-green-400');
                        resultContent.innerHTML = `
                            <p class="font-bold text-green-700 text-center text-lg mb-2">SUCCESS</p>
                            <p class="text-sm"><strong>Name:</strong> ${result.voter_details.name}</p>
                            <p class="text-sm"><strong>Voter ID:</strong> ${result.voter_details.voter_id}</p>
                            <p class="mt-2 text-xs italic">${result.reason}</p>
                        `;
                    } else {
                        resultBox.classList.add('bg-red-200', 'border-red-400');
                        resultContent.innerHTML = `
                            <p class="font-bold text-red-700 text-center text-lg mb-2">FAILURE</p>
                            <p class="text-sm">${result.reason}</p>
                        `;
                    }
                } catch (error) {
                    console.error('Error during verification:', error);
                    loadingIndicator.classList.add('hidden');
                    resultBox.classList.add('bg-red-200', 'border-red-400');
                    resultContent.innerHTML = `<p class="font-bold text-red-700 text-center text-lg mb-2">ERROR</p><p class="text-sm">A network or server error occurred. Please try again.</p>`;
                }
            });
        });
    </script>

</body>
</html>
